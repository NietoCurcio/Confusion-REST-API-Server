#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('confusionserver:server')
var http = require('http')
const https = require('https')
const fs = require('fs/promises')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)
app.set('secPort', port + 443)
/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const options = {}
const optionsPromise = async () => {
  // console.log('DENTRO')
  const read = []
  read.push(fs.readFile(__dirname + '/private.key', 'utf8'))
  read.push(fs.readFile(__dirname + '/certificate.pem', 'utf8'))
  const values = await Promise.all(read)
  options.key = values[0]
  options.cert = values[1]
  // console.log('ANTES RETORNO')
  return options
  // in code below would be possible use Promise.all as well, but async await is amazing
  // return new Promise((resolve, reject) => {
  //   fs.readFile(__dirname + '/private.key', 'utf8', (err, result) => {
  //     options.key = result
  //     fs.readFile(__dirname + '/certificate.pem', 'utf8', (err, result) => {
  //       options.cert = result
  //       resolve('Read Done')
  //     })
  //   })
  // })
}

// console.log('ANTES DE CHAMAR FUNÇAO ASYNC')
// console.log(
optionsPromise().then((res) => {
  const secureServer = https.createServer(options, app)
  secureServer.listen(app.get('secPort'), () =>
    console.log('Secure server listening on port ', app.get('secPort'))
  )
  secureServer.on('error', onError)
  secureServer.on('listening', onListening)
})
// )
// console.log('DEPOIS DE CHAMAR FUNÇAO ASYNC')
// notice that this console is printed before the console 'ANTES RETORNO' in async function.
// Calls to async function does not await for its return, since it returns a Promise <pending>,
// actually when something is returned, the .then callback will be called

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
